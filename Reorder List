Brute Force Method:
ListNode* reverse(ListNode* head){
    ListNode* prev=NULL;
    ListNode* nextnode= NULL;
    while(head){
        nextnode=head->next;
        head->next=prev;
        prev=head;
        head=nextnode;
    }
    return prev;
}

    void reorderList(ListNode* head) {
        while(head){
            head->next=reverse(head->next);
            head=head->next;
        }
    }
__________________________________________________________________________________________________________________________________________________________
Two Pointer OR Slow And Fast Pointer Approach:
void reorderList(ListNode* head) {
        // base case : linkedlist is empty
        if (!head) return;
        
        // finding the middle with the help of two pointer approach
        ListNode *tmp = head, *half = head, *prev = NULL;
        while (tmp->next && tmp->next->next) {
            tmp = tmp->next->next;
            half = half->next;
        }
        
        // adding one bit in case of lists with even length
        if (tmp->next) half = half->next;
        
        // Now reverse the second half
        while (half) {
            tmp = half->next;
            half->next = prev;
            prev = half;
            half = tmp;
        }
        half = prev;
        
        // After reversing the second half, let us merge both the halfes
        while (head && half) {
            tmp = head->next;
            prev = half->next;
            head->next = half;
            half->next = tmp;
            head = tmp;
            half = prev;
        }
        
        // Base case : closing when we had even length arrays
        if (head && head->next) head->next->next = NULL;
    }
____________________________________________________________________________________________________________________________________________________________________

Stack Approach:
void reorderList(ListNode* head) {
        stack<ListNode*> s;
        ListNode* curr = head;
        while(curr){
            s.push(curr);
            curr = curr->next;
        }
        curr = head;
        unordered_map<ListNode*, bool> vis;
        while(true){
            ListNode* last = s.top();
            s.pop();
            ListNode* next = curr->next;
            vis[curr] = true;
            if(vis[last]){ 
                curr->next = NULL; 
                break; 
            } 
            curr->next = last; 
            vis[last] = true;
            curr = curr->next; 
            if(vis[next]){
                curr->next = NULL;
                break;
            }
            curr->next = next;
            curr = curr->next;
        }
    }
